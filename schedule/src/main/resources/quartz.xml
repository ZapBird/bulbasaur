<?xml version="1.0" encoding="gbk"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd" default-autowire="byName">


    <!--  **************** 每 30s 触发一次，遍历执行所有的job  start ****************-->
    <bean id="bulbasaurJobLoopDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass">
            <value>com.tmall.pokemon.bulbasaur.schedule.quartz.MyDetailQuartzJobBean</value>
        </property>
        <property name="jobDataAsMap">
            <map>
                <entry key="targetObject" value="bulbasaurJobProcessor"/>
                <entry key="targetMethod" value="execute"/>
            </map>
        </property>
    </bean>
    <bean id="bulbasaurJobLoopTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="name" value="job不间断尝试执行"/>
        <property name="group" value="bulbasaur"/>
        <property name="jobDetail">
            <ref bean="bulbasaurJobLoopDetail"/>
        </property>
        <property name="cronExpression">
            <value>0/30 * * * * ?</value>
        </property>
    </bean>
    <!--  **************** 每 30s 触发一次，遍历执行所有的job  end  ****************-->


    <!--  **************** 清理执行完的流程和节点数据 start  ****************-->

    <bean id="bulbasaurCleanerDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass">
            <value>com.tmall.pokemon.bulbasaur.schedule.quartz.MyDetailQuartzJobBean</value>
        </property>
        <property name="jobDataAsMap">
            <map>
                <entry key="targetObject" value="bulbasaurCleanerPrcessor"/>
                <entry key="targetMethod" value="execute"/>
            </map>
        </property>
    </bean>

    <bean id="bulbasaurCleanerTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="name" value="定时清理执行完的流程和节点"/>
        <property name="group" value="bulbasaur"/>
        <property name="jobDetail">
            <ref bean="bulbasaurCleanerDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 0/6 * * ?</value>
        </property>
    </bean>

    <bean id="bulbasaurJobCleanerDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass">
            <value>com.tmall.pokemon.bulbasaur.schedule.quartz.MyDetailQuartzJobBean</value>
        </property>
        <property name="jobDataAsMap">
            <map>
                <entry key="targetObject" value="bulbasaurJobCleanerProcessor"/>
                <entry key="targetMethod" value="execute"/>
            </map>
        </property>
    </bean>
    <bean id="bulbasaurJobCleanerTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="name" value="定时清理job"/>
        <property name="group" value="bulbasaur"/>
        <property name="jobDetail">
            <ref bean="bulbasaurJobCleanerDetail"/>
        </property>
        <property name="cronExpression">
            <value>0 0 0/2 * * ?</value>
        </property>
    </bean>
    <!--  **************** 清理执行完的流程和节点数据 end  ****************-->


    <!-- =============================================================================-->


    <bean name="bulbasaurScheduler"
          autowire="no"
          class="com.tmall.pokemon.bulbasaur.schedule.quartz.BulbasaurScheduler">
        <!-- 任务列表，可以配置多个任务加入到该List -->
        <property name="triggers">
            <list>
                <ref bean="bulbasaurJobLoopTrigger"/>
                <ref bean="bulbasaurCleanerTrigger"/>
                <ref bean="bulbasaurJobCleanerTrigger"/>
            </list>
        </property>
        <!-- 数据源，如果Quartz的表位于项目数据源中则可直接使用项目数据源-->
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <!-- 用数据库最新配置覆盖已有配置 有问题 TODO-->
        <!--<property name="overwriteExistingJobs" value="true" />-->
        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="3"/>
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true"/>

    </bean>

</beans>